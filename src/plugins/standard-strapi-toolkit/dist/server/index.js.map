{"version":3,"file":"index.js","sources":["../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../admin/src/pluginId.ts","../../lib/custom-fields.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/content-types/index.ts","../../server/src/controllers/controller.ts","../../server/src/controllers/landing-controller.ts","../../server/src/controllers/index.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/routes/content-api.ts","../../server/src/routes/landing-api.ts","../../server/src/routes/index.ts","../../lib/utils.ts","../../server/src/services/landing.ts","../../server/src/services/service.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/strapi';\r\n\r\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  // bootstrap phase\r\n};\r\n\r\nexport default bootstrap;\r\n","import type { Core } from '@strapi/strapi';\r\n\r\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  // destroy phase\r\n};\r\n\r\nexport default destroy;\r\n","export const PLUGIN_ID = 'standard-strapi-toolkit';\r\n","export const CUSTOM_FIELDS_IDS_MAP = {\r\n  simple_tags: 'simple-tags',\r\n  multi_tags: 'multi-tags',\r\n}\r\n","import type { Core } from '@strapi/strapi';\r\nimport { PLUGIN_ID } from '../../admin/src/pluginId';\r\nimport { CUSTOM_FIELDS_IDS_MAP } from '../../lib/custom-fields';\r\n\r\n\r\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  // register phase\r\n  strapi.customFields.register({\r\n    plugin: PLUGIN_ID,\r\n    name: 'multi-select',\r\n    type: 'json'\r\n  });\r\n\r\n  strapi.customFields.register({\r\n    plugin: PLUGIN_ID,\r\n    name: CUSTOM_FIELDS_IDS_MAP.simple_tags,\r\n    type: 'json'\r\n  });\r\n\r\n  strapi.customFields.register({\r\n    plugin: PLUGIN_ID,\r\n    name: CUSTOM_FIELDS_IDS_MAP.multi_tags,\r\n    type: 'json'\r\n  });\r\n};\r\n\r\nexport default register;\r\n","export default {\r\n  default: {},\r\n  validator() {},\r\n};\r\n","export default {};\r\n","import type { Core } from '@strapi/strapi';\r\n\r\nconst controller = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  index(ctx) {\r\n    ctx.body = strapi\r\n      .plugin('standard-strapi-toolkit')\r\n      // the name of the service file & the method.\r\n      .service('service')\r\n      .getWelcomeMessage();\r\n  },\r\n});\r\n\r\nexport default controller;\r\n","import type { Core } from '@strapi/strapi';\r\nimport { PLUGIN_ID } from '../../../admin/src/pluginId';\r\n\r\nconst service = 'landing';\r\n\r\nconst landing = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  index(ctx) {\r\n    ctx.body = strapi\r\n      .plugin(PLUGIN_ID)\r\n      // the name of the service file & the method.\r\n      .service(service)\r\n      .getWelcomeMessage();\r\n  },\r\n\r\n  async teamMembers(ctx) {\r\n    ctx.body = await strapi\r\n      .plugin(PLUGIN_ID)\r\n      .service(service)\r\n      .getTeamMembers(ctx);\r\n  },\r\n\r\n  async articles(ctx) {\r\n    ctx.body = await strapi\r\n      .plugin(PLUGIN_ID)\r\n      .service(service)\r\n      .getArticles(ctx);\r\n  },\r\n\r\n  async articleDetail(ctx) {\r\n    ctx.body = await strapi\r\n      .plugin(PLUGIN_ID)\r\n      .service(service)\r\n      .getArticleDetail(ctx);\r\n  },\r\n\r\n  async books(ctx) {\r\n    ctx.body = await strapi\r\n      .plugin(PLUGIN_ID)\r\n      .service(service)\r\n      .getBooks(ctx);\r\n  },\r\n\r\n  async bookDetail(ctx) {\r\n    ctx.body = await strapi\r\n      .plugin(PLUGIN_ID)\r\n      .service(service)\r\n      .getBookDetail(ctx);\r\n  },\r\n});\r\n\r\nexport default landing;\r\n","import controller from './controller';\r\nimport landing from './landing-controller';\r\n\r\nexport default {\r\n  controller,\r\n  landing,\r\n};\r\n","export default {};\r\n","export default {};\r\n","export default [\r\n  {\r\n    method: 'GET',\r\n    path: '/',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.index',\r\n    config: {\r\n      auth: false,\r\n      // policies: [],\r\n    },\r\n  },\r\n];\r\n","export default [\r\n  {\r\n    method: 'GET',\r\n    path: '/landing',\r\n    handler: 'landing.index',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/landing/team-members',\r\n    handler: 'landing.teamMembers',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/landing/articles',\r\n    handler: 'landing.articles',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/landing/articles/:slug',\r\n    handler: 'landing.articleDetail',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/landing/books',\r\n    handler: 'landing.books',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/landing/books/:slug',\r\n    handler: 'landing.bookDetail',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n];\r\n","import contentAPIRoutes from './content-api';\r\nimport landingAPIRoutes from './landing-api';\r\n\r\nconst routes = {\r\n  'content-api': {\r\n    type: 'content-api',\r\n    routes: contentAPIRoutes,\r\n  },\r\n  'landing': {\r\n    type: 'content-api',\r\n    routes: landingAPIRoutes,\r\n  },\r\n};\r\n\r\nexport default routes;\r\n","import { Core } from \"@strapi/strapi\";\r\n\r\nexport function getServerUrl(ctx, strapi: Core.Strapi): string {\r\n  const { request } = ctx;\r\n  const isDevelopment = strapi.config.get('environment') === 'development';\r\n  return isDevelopment ? `${request.protocol}://${request.host}` : '';\r\n}\r\n","import type { Core } from '@strapi/strapi';\r\nimport { getServerUrl } from '../../../lib/utils';\r\n\r\nconst landing = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  getWelcomeMessage() {\r\n    return 'Welcome to Standard-Strapi-Toolkit Landing  ðŸš€';\r\n  },\r\n\r\n\r\n  async getTeamMembers(ctx: any) {\r\n    const members = await strapi.entityService.findMany('api::team-member.team-member', {\r\n      filters: { isVisible: true },\r\n      populate: ['avatar'],\r\n      sort: [{ displayOrder: 'asc' }],\r\n    });\r\n    // members.sort((a, b) => a.displayOrder - b.displayOrder);\r\n\r\n    const serverUrl = getServerUrl(ctx, strapi);\r\n    const membersWithAvatarUrl = members.map((member) => {\r\n      const thumbnailUrl = member.avatar?.formats?.thumbnail?.url || member.avatar?.url || null;\r\n\r\n      return {\r\n        ...member,\r\n        avatar: undefined,\r\n        avatarUrl: thumbnailUrl ? (serverUrl + thumbnailUrl) : null,\r\n      };\r\n    });\r\n\r\n    return {\r\n      statusCode: 200,\r\n      success: true,\r\n      message: \"All team members fetched successfully.\",\r\n      founders: membersWithAvatarUrl.filter(member => member.type === 'FOUNDER'),\r\n      humans: membersWithAvatarUrl.filter(member => member.type === 'HUMAN'),\r\n      aiAgents: membersWithAvatarUrl.filter(member => (member.type === 'AI_AGENT')),\r\n      mainAiAgent: membersWithAvatarUrl.find(member => member.type === 'MAIN_AI_AGENT'),\r\n    };\r\n  },\r\n\r\n\r\n  async getArticles(ctx: any) {\r\n    const articles = await strapi.entityService.findMany('api::article.article', {\r\n      populate: {\r\n        cover: true,\r\n        category: true,\r\n        author: {\r\n          populate: {\r\n            avatar: true,\r\n          }\r\n        },\r\n      },\r\n      sort: [{ publishedOn: 'desc' }],\r\n    });\r\n\r\n    const serverUrl = getServerUrl(ctx, strapi);\r\n    const articlesWithCoverAndAvatarUrl = articles.map((article) => {\r\n      const coverThumbUrl = article.cover?.formats?.thumbnail?.url || article.cover?.url;\r\n      const avatarThumbUrl = article.author?.avatar?.formats?.thumbnail?.url || article.author?.avatar?.url;\r\n\r\n      return {\r\n        ...article,\r\n        cover: undefined,\r\n        coverUrl: coverThumbUrl ? serverUrl + coverThumbUrl : null,\r\n\r\n        author: {\r\n          ...article.author,\r\n          avatar: undefined,\r\n          avatarUrl: avatarThumbUrl ? serverUrl + avatarThumbUrl : null,\r\n        },\r\n      };\r\n    });\r\n\r\n\r\n    return {\r\n      statusCode: 200,\r\n      success: true,\r\n      message: \"All articles fetched successfully.\",\r\n      articles: articlesWithCoverAndAvatarUrl,\r\n    };\r\n  },\r\n\r\n\r\n  async getArticleDetail(ctx: any) {\r\n    const { slug } = ctx.params;\r\n\r\n    const articles = await strapi.entityService.findMany('api::article.article', {\r\n      filters: { slug },\r\n      populate: {\r\n        cover: true,\r\n        category: true,\r\n        blocks: true,\r\n        author: {\r\n          populate: {\r\n            avatar: true,\r\n          }\r\n        },\r\n      },\r\n      limit: 1,\r\n    });\r\n\r\n    const article = articles?.[0];\r\n\r\n    if (!article) {\r\n      ctx.notFound(\"Article not found\");\r\n      return;\r\n    }\r\n\r\n    const serverUrl = getServerUrl(ctx, strapi);\r\n\r\n    const coverThumbUrl = article.cover?.formats?.thumbnail?.url || article.cover?.url;\r\n    const avatarThumbUrl = article.author?.avatar?.formats?.thumbnail?.url || article.author?.avatar?.url;\r\n\r\n    const formattedArticle = {\r\n      ...article,\r\n      cover: undefined,\r\n      coverUrl: coverThumbUrl ? serverUrl + coverThumbUrl : null,\r\n      author: {\r\n        ...article.author,\r\n        avatar: undefined,\r\n        avatarUrl: avatarThumbUrl ? serverUrl + avatarThumbUrl : null,\r\n      },\r\n    };\r\n\r\n    return {\r\n      statusCode: 200,\r\n      success: true,\r\n      message: \"Article detail fetched successfully.\",\r\n      article: formattedArticle,\r\n    };\r\n  },\r\n\r\n\r\n  async getBooks(ctx: any) {\r\n    const books = await strapi.entityService.findMany('api::book.book', {\r\n      filters: { isVisible: true },\r\n      sort: [{ displayOrder: 'asc' }],\r\n    });\r\n\r\n    return {\r\n      statusCode: 200,\r\n      success: true,\r\n      message: \"All books fetched successfully.\",\r\n      books,\r\n    };\r\n  },\r\n\r\n\r\n  async getBookDetail(ctx: any) {\r\n    const { slug } = ctx.params;\r\n\r\n    const books = await strapi.entityService.findMany('api::book.book', {\r\n      filters: { slug },\r\n      limit: 1,\r\n    });\r\n\r\n    const book = books?.[0];\r\n\r\n    if (!book) {\r\n      ctx.notFound(\"Book not found\");\r\n      return;\r\n    }\r\n\r\n    return {\r\n      statusCode: 200,\r\n      success: true,\r\n      message: \"Book detail fetched successfully.\",\r\n      book,\r\n    };\r\n  },\r\n\r\n});\r\n\r\nexport default landing;\r\n","import type { Core } from '@strapi/strapi';\r\n\r\nconst service = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  getWelcomeMessage() {\r\n    return 'Welcome to Standard-Strapi-Toolkit ðŸš€';\r\n  },\r\n});\r\n\r\nexport default service;\r\n","import landing from './landing';\r\nimport service from './service';\r\n\r\nexport default {\r\n  service,\r\n  landing,\r\n};\r\n","/**\r\n * Application methods\r\n */\r\nimport bootstrap from './bootstrap';\r\nimport destroy from './destroy';\r\nimport register from './register';\r\n\r\n/**\r\n * Plugin server methods\r\n */\r\nimport config from './config';\r\nimport contentTypes from './content-types';\r\nimport controllers from './controllers';\r\nimport middlewares from './middlewares';\r\nimport policies from './policies';\r\nimport routes from './routes';\r\nimport services from './services';\r\n\r\nexport default {\r\n  register,\r\n  bootstrap,\r\n  destroy,\r\n  config,\r\n  controllers,\r\n  routes,\r\n  services,\r\n  contentTypes,\r\n  policies,\r\n  middlewares,\r\n};\r\n"],"names":["service","landing"],"mappings":"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"}