{"version":3,"file":"index.js","sources":["../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../admin/src/pluginId.ts","../../lib/custom-fields.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/content-types/index.ts","../../server/src/controllers/controller.ts","../../server/src/controllers/landing-controller.ts","../../server/src/controllers/index.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/routes/content-api.ts","../../server/src/routes/landing-api.ts","../../server/src/routes/index.ts","../../server/src/services/landing.ts","../../server/src/services/service.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/strapi';\r\n\r\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  // bootstrap phase\r\n};\r\n\r\nexport default bootstrap;\r\n","import type { Core } from '@strapi/strapi';\r\n\r\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  // destroy phase\r\n};\r\n\r\nexport default destroy;\r\n","export const PLUGIN_ID = 'standard-strapi-toolkit';\r\n","export const CUSTOM_FIELDS_IDS_MAP = {\r\n  simple_tags: 'simple-tags',\r\n  multi_tags: 'multi-tags',\r\n}\r\n","import type { Core } from '@strapi/strapi';\r\nimport { PLUGIN_ID } from '../../admin/src/pluginId';\r\nimport { CUSTOM_FIELDS_IDS_MAP } from '../../lib/custom-fields';\r\n\r\n\r\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  // register phase\r\n  strapi.customFields.register({\r\n    plugin: PLUGIN_ID,\r\n    name: 'multi-select',\r\n    type: 'json'\r\n  });\r\n\r\n  strapi.customFields.register({\r\n    plugin: PLUGIN_ID,\r\n    name: CUSTOM_FIELDS_IDS_MAP.simple_tags,\r\n    type: 'json'\r\n  });\r\n\r\n  strapi.customFields.register({\r\n    plugin: PLUGIN_ID,\r\n    name: CUSTOM_FIELDS_IDS_MAP.multi_tags,\r\n    type: 'json'\r\n  });\r\n};\r\n\r\nexport default register;\r\n","export default {\r\n  default: {},\r\n  validator() {},\r\n};\r\n","export default {};\r\n","import type { Core } from '@strapi/strapi';\r\n\r\nconst controller = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  index(ctx) {\r\n    ctx.body = strapi\r\n      .plugin('standard-strapi-toolkit')\r\n      // the name of the service file & the method.\r\n      .service('service')\r\n      .getWelcomeMessage();\r\n  },\r\n});\r\n\r\nexport default controller;\r\n","import type { Core } from '@strapi/strapi';\r\nimport { PLUGIN_ID } from '../../../admin/src/pluginId';\r\n\r\nconst service = 'landing';\r\n\r\nconst landing = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  index(ctx) {\r\n    ctx.body = strapi\r\n      .plugin(PLUGIN_ID)\r\n      // the name of the service file & the method.\r\n      .service(service)\r\n      .getWelcomeMessage();\r\n  },\r\n\r\n  async teamMembers(ctx) {\r\n    ctx.body = await strapi\r\n      .plugin(PLUGIN_ID)\r\n      .service(service)\r\n      .getTeamMembers(ctx);\r\n  },\r\n});\r\n\r\nexport default landing;\r\n","import controller from './controller';\r\nimport landing from './landing-controller';\r\n\r\nexport default {\r\n  controller,\r\n  landing,\r\n};\r\n","export default {};\r\n","export default {};\r\n","export default [\r\n  {\r\n    method: 'GET',\r\n    path: '/',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.index',\r\n    config: {\r\n      auth: false,\r\n      // policies: [],\r\n    },\r\n  },\r\n];\r\n","export default [\r\n  {\r\n    method: 'GET',\r\n    path: '/landing',\r\n    handler: 'landing.index',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/landing/team-members',\r\n    handler: 'landing.teamMembers',\r\n    config: {\r\n      auth: false,\r\n    },\r\n  },\r\n];\r\n","import contentAPIRoutes from './content-api';\r\nimport landingAPIRoutes from './landing-api';\r\n\r\nconst routes = {\r\n  'content-api': {\r\n    type: 'content-api',\r\n    routes: contentAPIRoutes,\r\n  },\r\n  'landing': {\r\n    type: 'content-api',\r\n    routes: landingAPIRoutes,\r\n  },\r\n};\r\n\r\nexport default routes;\r\n","import type { Core } from '@strapi/strapi';\r\n\r\nconst landing = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  getWelcomeMessage() {\r\n    return 'Welcome to Standard-Strapi-Toolkit Landing  ðŸš€';\r\n  },\r\n\r\n\r\n  async getTeamMembers(ctx: any) {\r\n    const members = await strapi.entityService.findMany('api::team-member.team-member', {\r\n      populate: ['avatar'],\r\n    });\r\n    const sortedMembers = members.sort((a, b) => a.displayOrder - b.displayOrder);\r\n\r\n    const serverUrl = `${ctx.request.protocol}://${ctx.request.host}`;\r\n    const formattedMember = sortedMembers.map((member) => {\r\n      const thumbnailUrl = member.avatar?.formats?.thumbnail?.url || member.avatar?.url || null;\r\n\r\n      return {\r\n        ...member,\r\n        avatar: undefined,\r\n        avatarUrl: thumbnailUrl ? (serverUrl + thumbnailUrl) : null,\r\n      };\r\n    });\r\n\r\n    return {\r\n      statusCode: 200,\r\n      success: true,\r\n      serverUrl,\r\n      message: \"All team members fetched successfully.\",\r\n      founders: formattedMember.filter(member => member.type === 'FOUNDER'),\r\n      humans: formattedMember.filter(member => member.type === 'HUMAN'),\r\n      aiAgents: formattedMember.filter(member => member.type === 'AI_AGENT'),\r\n    };\r\n  },\r\n});\r\n\r\nexport default landing;\r\n","import type { Core } from '@strapi/strapi';\r\n\r\nconst service = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  getWelcomeMessage() {\r\n    return 'Welcome to Standard-Strapi-Toolkit ðŸš€';\r\n  },\r\n});\r\n\r\nexport default service;\r\n","import landing from './landing';\r\nimport service from './service';\r\n\r\nexport default {\r\n  service,\r\n  landing,\r\n};\r\n","/**\r\n * Application methods\r\n */\r\nimport bootstrap from './bootstrap';\r\nimport destroy from './destroy';\r\nimport register from './register';\r\n\r\n/**\r\n * Plugin server methods\r\n */\r\nimport config from './config';\r\nimport contentTypes from './content-types';\r\nimport controllers from './controllers';\r\nimport middlewares from './middlewares';\r\nimport policies from './policies';\r\nimport routes from './routes';\r\nimport services from './services';\r\n\r\nexport default {\r\n  register,\r\n  bootstrap,\r\n  destroy,\r\n  config,\r\n  controllers,\r\n  routes,\r\n  services,\r\n  contentTypes,\r\n  policies,\r\n  middlewares,\r\n};\r\n"],"names":["service","landing"],"mappings":"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"}